{# Component Documentation ------------------------------------------------------------------------------------------------------------- #}

{% set dropdownMeta = {
    args: '{{ dropdown(
    props={
        position: ["top", "bottom", "left", "right"],
        dropdownItems:[
            { macro:"", props:{}, attrs:{} }
        ]
    },
    attrs={},
    triggerProps={}
) }}',
description: "
- Defaults to displaying buttons in a list
- Can use `{% caller() %} instead for more complex inner components
- `position` is an array where you can set the relative positions to the trigger element.
"
} %}

{# Nested Components ------------------------------------------------------------------------------------------------------------------- #}

{% from "components/button.njk" import button %}
{% from "snippets/loopAttrs.njk" import loopAttrs %}

{# Macro ------------------------------------------------------------------------------------------------------------------------------- #}

{% macro dropdown(props={}, attrs={}, triggerProps={}) %}

{# Values ------------------------------------------------------------------------------------------------------------------------------ #}

{% set panelStyleClasses = "bg-surface border border-2 px-4 py-3 rounded-sm" %}

{% set listStyleClasses = "gap-3" %}

{% set position %}
    {% if props.position.includes("top") %}
        bottom-full mb-2
    {% endif %}
    {% if props.position.includes("bottom") %}
        mt-2
    {% endif %}
    {% if props.position.includes("right") %}
        right-0
    {% endif %}
    {% if props.position.includes("left") %}
        left-0
    {% endif %}
{% endset %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

<div
    x-data="{
        open: false,
        toggle() {
            if (this.open) {
                return this.close()
            }
            this.$refs.button.focus()
            this.open = true
        },
        close(focusAfter) {
            if (! this.open) return
            this.open = false
            focusAfter && focusAfter.focus()
        },
    }"
    x-id="['dropdown']"
    x-on:keydown.escape.prevent.stop="close($refs.button)"
    x-on:focusin.window="! $refs.panel.contains($event.target) && close()"
    {{ loopAttrs(attrs) }}
    class="relative max-w-fit {{ props.class }}"
>
    {{ button(
        props=triggerProps,
        attrs={
            "x-ref": "button",
            "@click": "toggle()",
            ":aria-expanded": "open",
            ":aria-controls":"$id('dropdown')"
        })
    }}
    <div
        x-ref="panel"
        x-show="open"
        x-on:click.outside="close($refs.button)"
        x-cloak
        :id="$id('dropdown')"
        class="absolute min-w-max z-20 outline-none {{ panelStyleClasses }} {{ position }}">
        <ul class="flex flex-col items-start {{ listStyleClasses }}">
            {% if caller %}
                {{ caller() | safe }}
            {% else %}
                {% for item in props.dropdownItems %}
                    <li class="*:inline-block">{{ item.macro(item.props, item.attrs) }}</li>
                {% endfor %}
            {% endif %}
        </ul>
    </div>
</div>

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% endmacro %}
