{# Component Documentation ------------------------------------------------------------------------------------------------------------- #}

{% set marqueeMeta = {
    args: '{% call marquee(
    props={
        speed: "",
        pauseOnHover: boolean
    },
    attrs={}
) %}
{% endcall %}',
description: "
- Put elements you want repeated inside the `{{ caller() }}`
"
} %}

{# Nested Components ------------------------------------------------------------------------------------------------------------------- #}

{% from "components/button.njk" import button %}
{% from "snippets/loopAttrs.njk" import loopAttrs %}

{# Macro ------------------------------------------------------------------------------------------------------------------------------- #}

{% macro marquee(props={}, attrs={}) %}

{# Values ------------------------------------------------------------------------------------------------------------------------------ #}

<style>
    @property --100cqi {
        syntax: "<length>";
        initial-value: 0px;
        inherits: true;
    }

    [data-marquee] > * {
        --100cqi: 100cqi;
        --px-width: tan(atan2(var(--100cqi), 1px));
        --marquee-duration: calc(var(--px-width) / 1500 * {{ props.speed }})
    }
</style>

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

<div
    data-marquee
    x-data="{
        pauseOnHover: true,
        init() {
            this.$nextTick(() => {
                this.$refs.marqueeTrack.appendChild(this.$refs.marqueeList.cloneNode(true));
            });
        }
    }"
    class="relative @container overflow-hidden {{ attrs.class }}"
    {{ loopAttrs(attrs) }}>
    <div aria-hidden="true" class="absolute inset-y-0 z-10 w-[5%] start-0 bg-linear-to-r from-gainsboro to-transparent"></div>
    <div aria-hidden="true" class="absolute inset-y-0 z-10 w-[5%] end-0 bg-linear-to-l from-gainsboro to-transparent"></div>
    <div
        x-ref="marqueeTrack"
        style="--animate-duration: var(--marquee-duration)"
        class="relative flex w-full animate-marquee"
        {% if props.pauseOnHover %}x-bind:class="{ 'hover:[animation-play-state:paused]': pauseOnHover }"{% endif %}
    >
    <div x-ref="marqueeList" class="flex items-center justify-around min-w-full shrink-0 flex-nowrap">
        {{ caller() | safe }}
    </div>
  </div>
</div>

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% endmacro %}
