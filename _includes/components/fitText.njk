{# Nested components ------------------------------------------------------------------------------------------------------------------- #}

{% from "snippets/loopAttrs.njk" import loopAttrs %}

{# Macro ------------------------------------------------------------------------------------------------------------------------------- #}

{% macro fitText(props={}, attrs={}) %}
<{{ props.tag }} class="text-fit {{ attrs.class }}" {{ loopAttrs(attrs) }}>
        <span><span>{{ props.content }}</span></span>
        <span aria-hidden="true">{{ props.content }}</span>
    </{{ props.tag }}>

    <style>
        .text-fit {
            display: flex;
            container-type: inline-size;

            --captured-length: initial;
            --support-sentinel: var(--captured-length, 9999px);
            --max-font-size: 10rem;

            & > [aria-hidden] {
                visibility: hidden;
            }

            & > :not([aria-hidden]) {
                flex-grow: 1;
                container-type: inline-size;

                --captured-length: 100cqi;
                --available-space: var(--captured-length);

                & > * {
                --support-sentinel: inherit;
                --captured-length: 100cqi;
                --ratio: tan(atan2(
                    var(--available-space),
                    var(--available-space) - var(--captured-length)
                ));
                --font-size: clamp(
                    1em,
                    1em * var(--ratio),
                    var(--max-font-size, infinity * 1px)
                    -
                    var(--support-sentinel)
                );
                inline-size: var(--available-space);

                &:not(.text-fit) {
                    display: block;
                    font-size: var(--font-size);

                    @container (inline-size > 0) {
                    white-space: nowrap;
                    }
                }

                &.text-fit {
                    --captured-length2: var(--font-size);
                    font-variation-settings:
                    'opsz'
                    tan(atan2(var(--captured-length2), 1px));
                }
                }
            }
        }

        @property --captured-length {
        syntax: "<length>";
        initial-value: 0px;
        inherits: true;
        }

        @property --captured-length2 {
        syntax: "<length>";
        initial-value: 0px;
        inherits: true;
        }
    </style>
{% endmacro %}
