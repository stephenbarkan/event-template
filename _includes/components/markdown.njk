{# Component Documentation ------------------------------------------------------------------------------------------------------------- #}

{% set markdownMeta = {
    args: '{{ markdown(
    props={
        content: "",
        transform: true | false,
        overrides: {
            fontSize: "",
            primaryColor: "",
            linkColor: "",
            radius: "",
            headingFont: "",
            headingFontWeight: "",
            scale: ""
        },
        customStyles: ""
    },
    attrs={}
) }}',
description: "
- Use `props.content` to inject markdown from a data source. Use `{{ caller() }} when you want to write it directly inside the component.
- `props.transform` can be turned off when the content will already be transformed by Eleventy, as is the case with .md file `content`.
- `props.overrides` can set instance-specific overrides to the styles, such as using a smaller base font size or different color.
- `customStyles` takes in CSS to set instance-specific styles, such as making bolded text appear as a different color instead of bold.
"
} %}

{# Nested components ------------------------------------------------------------------------------------------------------------------- #}

{% from "snippets/loopAttrs.njk" import loopAttrs %}

{# Values ------------------------------------------------------------------------------------------------------------------------------ #}

{% set themeDefaults = {
    fontSize: "text-base",
    textColor: "color-neutral",
    linkColor: "color-link",
    radius: "radius",
    headingFont: "",
    headingFontWeight: "500",
    headingColor: "color-hue",
    scale: "1.25"
} %}

{# Macro ------------------------------------------------------------------------------------------------------------------------------- #}

{% macro markdown(props={}, attrs={}) %}

    {% set mdFontSize %}--md-font-size: var(--{% if props.overrides.fontSize %}{{ props.overrides.fontSize }}{% else %}{{ themeDefaults.fontSize }}{% endif %});{% endset %}
    {% set mdLineHeight %}--md-line-height: var(--{% if props.overrides.fontSize %}{{ props.overrides.fontSize }}{% else %}{{ themeDefaults.fontSize }}{% endif %}--line-height);{% endset %}
    {% set mdTextColor %}--md-text-color: var(--{% if props.overrides.textColor %}{{ props.overrides.textColor }}{% else %}{{ themeDefaults.textColor }}{% endif %});{% endset %}
    {% set mdHeadingColor %}--md-heading-color: var(--{% if props.overrides.headingColor %}{{ props.overrides.headingColor }}{% else %}{{ themeDefaults.headingColor }}{% endif %});{% endset %}
    {% set mdLinkColor %}--md-link-color: var(--{% if props.overrides.linkColor %}{{ props.overrides.linkColor }}{% else %}{{ themeDefaults.linkColor }}{% endif %});{% endset %}
    {% set mdRadius %}--md-radius: var(--{% if props.overrides.radius %}{{ props.overrides.radius }}{% else %}{{ themeDefaults.radius }}{% endif %});{% endset %}
    {% set mdHeadingFont %}--md-heading-font: var(--{% if props.overrides.headingFont %}{{ props.overrides.headingFont }}{% else %}{{ themeDefaults.headingFont }}{% endif %});{% endset %}
    {% set mdHeadingFontWeight %}--md-heading-font-weight: {% if props.overrides.headingFontWeight %}{{ props.overrides.headingFontWeight }}{% else %}{{ themeDefaults.headingFontWeight }}{% endif %};{% endset %}
    {% set mdScale %}--md-scale: {% if props.overrides.scale %}{{ props.overrides.scale }}{% else %}{{ themeDefaults.scale }}{% endif %};{% endset %}

    <div
        {{ loopAttrs(attrs) }}
        style="
            {{ mdFontSize }}
            {{ mdTextColor }}
            {{ mdLinkColor }}
            {{ mdRadius }}
            {{ mdHeadingFont }}
            {{ mdHeadingFontWeight }}
            {{ mdHeadingColor }}
            {{ mdScale }}
        "
        class="markdown {{ attrs.class }}">
        {% if props.content %}
            {% if props.transform === true %}
                {{ props.content | markdownify | safe }}
            {% else %}
                {{ props.content | safe }}
            {% endif %}
        {% endif %}
        {% if caller %}
            {% if props.transform === true %}
                {{ caller() | markdownify | safe }}
            {% else %}
                {{ caller() | safe }}
            {% endif %}
        {% endif %}
    </div>

    {% if props.customStyles %}
        <style>
            .markdown {
                {{ props.customStyles }}
            }
        </style>
    {% endif %}

{# ------------------------------------------------------------------------------------------------------------------------------------- #}

{% endmacro %}
